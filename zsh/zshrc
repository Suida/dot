# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    history
    vscode
    z
    zsh-autosuggestions
    zsh-syntax-highlighting
    docker 
    docker-compose
    kubectl
    golang
    cargo
    yarn
    cargo
    rustup
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
alias zshconfig="vi ~/.zshrc"
alias ohmyzsh="vi ~/.oh-my-zsh"
alias v="nvim $*"
alias vi="nvim $*"
alias gj="gitmoji $*"


if [[ -e "/proc/sys/kernel/osrelease" ]] && [[ $(cat /proc/sys/kernel/osrelease) = *microsoft* ]]
then
    function open
    {
        if [[ $1 && ! -e $1 ]]
        then
            echo "File not found: $1" 1>&2
            exit 1
        fi
        distro_name=$(awk 'BEGIN{FS="="} $1=="DISTRIB_ID" {print $2}' /etc/lsb-release)-$(awk 'BEGIN{FS="="} $1=="DISTRIB_RELEASE" {print $2}' /etc/lsb-release)
        absp=$(echo -E '\\wsl$\'$distro_name$(pwd)/$1 | sed 's|\/|\\|g')
        cmd.exe /C start $absp
    }
fi


################################################################################
#                             PROXY SETTINGS                                   #
################################################################################

# P / V mutex operations
# Lock on /etc/hosts
function P
{
    while [[ -e $1 ]]
    do
        echo -ne "Waiting for host temporary file to be deleted, if you are \
                  sure there is no other zsh process running, delete ${1}\r"
        sleep 2
    done
    sudo touch $1
}

# Unlock
function V
{
    if [[ -e $1 ]]
    then
        sudo rm -rf $1
    fi
}

SED=sed

# Get hosts file location depending on os type
if [[ $OSTYPE == *linux-gnu* ]]; then
    hosts_path=/etc/hosts
elif [[ $OSTYPE == *darwin* ]]; then
    hosts_path=/private/etc/hosts
    # `sed` on MacOS is so fucking hard to use or maintain.
    # Use gnu-sed instead.
    if [[ ! $(which gsed) == */gsed ]]; then
        brew install gnu-sed
    fi
    alias sed="gsed $*"
    SED=$(which gsed)
    # Also, `awk` here is also like a piece of shit,
    # use `gawk` instead.
    if [[ ! $(which gawk) == */gawk ]]; then
        brew install gawk
    fi
    alias awk="gawk $*"
    AWK=$(which gawk)
else
    echo "Unsupportted os type $OSTYPE"
    exit 1
fi

# Get proxy uri
if [[ -e "$HOME/.PROXY" ]]
then
    PROXY_IP=$($AWK 'BEGIN{FS=":"} {print $2}' $HOME/.PROXY | cut -c 3-)
    PROXY_URI=$(cat $HOME/.PROXY)
else
    # Get windows host ip address if it is under WSL environment.
    if [[ -e "/proc/sys/kernel/osrelease" ]] && [[ $(cat /proc/sys/kernel/osrelease) = *microsoft* ]]
    then
        PROXY_IP=$(cat /etc/resolv.conf | awk '$1=="nameserver" {print $2}')
    else
        # If not, the default ip address is localhost
        PROXY_IP=127.0.0.1
    fi

    # Set default proxy port which will possibly be reformed when meeting new
    # requirements.
    PROXY_URI=http://$PROXY_IP:7890
fi

tmp_lock=/tmp/zsh-host-lock.txt 

# P $tmp_lock
#
# # Set hosts related vars
# hosts=$(cat $hosts_path)
# proxy_host_name=proxyhost
# proxy_host_setting="${PROXY_IP} ${proxy_host_name}"
#
# # Add proxy host
# if [[ ! $hosts = *$proxy_host_name* ]]
# then
#     echo "Original hosts file content:"
#     $SED 's/^/... /' $hosts_path
#     echo $proxy_host_setting | sudo tee -a $hosts_path >> /dev/null
# elif [[ ! $(echo $hosts | grep $proxy_host_name) == *$PROXY_IP* ]]
# then
#     echo "Original hosts file content:"
#     $SED 's/^/... /' $hosts_path
#     sudo $SED -i "/.*\s*${proxy_host_name}/d" $hosts_path
#     sudo $SED -i "\$a\\${proxy_host_setting}" $hosts_path
# fi
#
# V $tmp_lock

# export http_proxy=$PROXY_URI
# export https_proxy=$PROXY_URI
# export HTTP_PROXY=$PROXY_URI
# export HTTPS_PROXY=$PROXY_URI

################################################################################
#                             PROXY SETTINGS END                               #
################################################################################

# LLVM & Clangd
export LDFLAGS="-L/usr/local/opt/llvm/lib"
export PATH="/usr/local/opt/llvm/bin:$PATH"
export CPPFLAGS="-I/usr/local/opt/llvm/include"

# Nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
export NVM_NODEJS_ORG_MIRROR=https://npm.taobao.org/mirrors/node
export npm_config_registry=https://registry.npm.taobao.org

# Pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
fi
eval "$(pyenv virtualenv-init -)"
export PYTHON_CONFIGURE_OPTS="--enable-framework"
export PYTHON_CONFIGURE_OPTS="--enable-shared"
export PYENV_VIRTUALENV_DISABLE_PROMPT=1

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Ack fix
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export NO_PROXY=.docker.internal,$NO_PROXY
export PATH=$HOME/.yarn/bin:$PATH
export PATH=$HOME/go/bin:$PATH
export PATH=$HOME/bin:$PATH

# Change driectory hook
function insource() {
    if [[ $(ls -a) == *.zsh-chpwd-hook* ]]
    then
        source .zsh-chpwd-hook
    fi
}
autoload -U add-zsh-hook
add-zsh-hook -Uz chpwd insource

# Fix tmux color
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#989cb4"

# Ninja completion
fpath=(/home/hugh/workspace/ninja-1.10.2/misc/zsh-completion $fpath)

# Bat theme
export BAT_THEME=gruvbox-dark

# Pipx & pipenv
export PATH="$PATH:/home/hugh/.local/bin"
autoload -U bashcompinit
bashcompinit
if [[ -e $PYENV_ROOT ]]
then
    eval "$(PATH=$PYENV_ROOT/versions/$(pyenv global)/bin:$PATH register-python-argcomplete pipx)"
else
    eval "$(register-python-argcomplete pipx)"
fi
eval "$(pipenv --completion)"
export PIPENV_VERBOSITY=-1

# Vcpkg & cmake
export VCPKG_CMAKE_SCRIPT_PATH=$HOME/workspace/github/vcpkg/scripts/buildsystems/vcpkg.cmake
